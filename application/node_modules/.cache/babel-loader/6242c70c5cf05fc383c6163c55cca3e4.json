{"ast":null,"code":"import { SET_TOKEN_ACTION, CLEAR_TOKEN_ACTION, ARG_TOKEN } from \"./constants\";\nimport { post, CODE_SUCCESS } from \"../../../common/crud\";\n\nconst env = require('../../../config/env');\n\nexport function login(data) {\n  const url = env.API_URL + 'auth/get-token';\n  return dispatch => {\n    return post(dispatch, url, data, {}, setTokenAction);\n  };\n}\nexport function setTokenAction(dispatch, data) {\n  if (data.code === CODE_SUCCESS) {\n    localStorage.setItem(ARG_TOKEN, JSON.stringify(data.data));\n  }\n\n  return {\n    type: SET_TOKEN_ACTION,\n    payload: null\n  };\n}\nexport function clearToken() {\n  localStorage.removeItem(ARG_TOKEN);\n  return dispatch => {\n    dispatch(clearTokenAction());\n  };\n}\nexport function clearTokenAction() {\n  return {\n    type: CLEAR_TOKEN_ACTION,\n    payload: null\n  };\n}\nexport function register(data) {\n  const url = env.API_URL + 'users/insert';\n  return dispatch => {\n    return post(dispatch, url, data, {});\n  };\n}","map":{"version":3,"sources":["/Users/trantuan/LaundryShop/laundry-shop-admin/application/src/features/Auth/redux/actions.js"],"names":["SET_TOKEN_ACTION","CLEAR_TOKEN_ACTION","ARG_TOKEN","post","CODE_SUCCESS","env","require","login","data","url","API_URL","dispatch","setTokenAction","code","localStorage","setItem","JSON","stringify","type","payload","clearToken","removeItem","clearTokenAction","register"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,kBAFJ,EAGIC,SAHJ,QAIO,aAJP;AAKA,SACIC,IADJ,EAEIC,YAFJ,QAGO,sBAHP;;AAKA,MAAMC,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AAEA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqB;AACxB,QAAMC,GAAG,GAAGJ,GAAG,CAACK,OAAJ,GAAc,gBAA1B;AACA,SAAOC,QAAQ,IAAI;AACf,WAAOR,IAAI,CAACQ,QAAD,EAAWF,GAAX,EAAgBD,IAAhB,EAAsB,EAAtB,EAA0BI,cAA1B,CAAX;AACH,GAFD;AAGH;AAED,OAAO,SAASA,cAAT,CAAwBD,QAAxB,EAAkCH,IAAlC,EAAwC;AAC3C,MAAIA,IAAI,CAACK,IAAL,KAAcT,YAAlB,EAAgC;AAC5BU,IAAAA,YAAY,CAACC,OAAb,CAAqBb,SAArB,EAAgCc,IAAI,CAACC,SAAL,CAAeT,IAAI,CAACA,IAApB,CAAhC;AACH;;AACD,SAAO;AACHU,IAAAA,IAAI,EAAKlB,gBADN;AAEHmB,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH;AAED,OAAO,SAASC,UAAT,GAAsB;AACzBN,EAAAA,YAAY,CAACO,UAAb,CAAwBnB,SAAxB;AACA,SAAOS,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACW,gBAAgB,EAAjB,CAAR;AACH,GAFD;AAGH;AAED,OAAO,SAASA,gBAAT,GAA4B;AAC/B,SAAO;AACHJ,IAAAA,IAAI,EAAKjB,kBADN;AAEHkB,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH;AAED,OAAO,SAASI,QAAT,CAAkBf,IAAlB,EAAwB;AAC3B,QAAMC,GAAG,GAAGJ,GAAG,CAACK,OAAJ,GAAc,cAA1B;AACA,SAAOC,QAAQ,IAAI;AACf,WAAOR,IAAI,CAACQ,QAAD,EAAWF,GAAX,EAAgBD,IAAhB,EAAsB,EAAtB,CAAX;AACH,GAFD;AAGH","sourcesContent":["import {\n    SET_TOKEN_ACTION,\n    CLEAR_TOKEN_ACTION,\n    ARG_TOKEN,\n} from \"./constants\";\nimport {\n    post,\n    CODE_SUCCESS\n} from \"../../../common/crud\";\n\nconst env = require('../../../config/env')\n\nexport function login(data) {\n    const url = env.API_URL + 'auth/get-token'\n    return dispatch => {\n        return post(dispatch, url, data, {}, setTokenAction)\n    }\n}\n\nexport function setTokenAction(dispatch, data) {\n    if (data.code === CODE_SUCCESS) {\n        localStorage.setItem(ARG_TOKEN, JSON.stringify(data.data))\n    }\n    return {\n        type   : SET_TOKEN_ACTION,\n        payload: null\n    };\n}\n\nexport function clearToken() {\n    localStorage.removeItem(ARG_TOKEN)\n    return dispatch => {\n        dispatch(clearTokenAction())\n    };\n}\n\nexport function clearTokenAction() {\n    return {\n        type   : CLEAR_TOKEN_ACTION,\n        payload: null\n    };\n}\n\nexport function register(data) {\n    const url = env.API_URL + 'users/insert'\n    return dispatch => {\n        return post(dispatch, url, data, {})\n    }\n}\n"]},"metadata":{},"sourceType":"module"}