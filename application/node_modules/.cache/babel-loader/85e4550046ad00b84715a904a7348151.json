{"ast":null,"code":"import { FETCH_USER_GENERAL_ACTION, FETCH_USER_ORDERS_ACTION, FETCH_USER_TRANSACTIONS_ACTION, PENDING_FETCH_USER_GENERAL_ACTION, PENDING_FETCH_USER_ORDERS_ACTION, PENDING_FETCH_USER_TRANSACTIONS_ACTION } from \"./constants\"; //import db from \"../../../database/firestore\";\n//const refMstUser = db.collection('mst_user')\n// ========================== User general ==========================\n\nexport function fetchUserGeneral(username) {\n  return dispatch => {\n    dispatch(pendingFetchUserGeneralAction());\n    dispatch(fetchUserGeneralAction(dispatch, {\n      data: null\n    }));\n    /*return refMstUser.where('username', '==', username).limit(1).get().then(snapshot => {\n        let data = null;\n        snapshot.forEach(doc => {\n            data = {\n                id: doc.id,\n                ...doc.data(),\n                balance: 0\n            }\n             return refMstUser.doc(doc.id).collection('transactions').get().then(snapshot_tran => {\n                let balance = 0;\n                snapshot_tran.forEach(doc_tran => {\n                    balance += parseInt(doc_tran.data().amount)\n                })\n                data.balance = balance;\n            }).finally(() => {\n                dispatch(fetchUserGeneralAction(dispatch, {data: data}));\n            });\n        });\n    })*/\n  };\n}\nexport function pendingFetchUserGeneralAction() {\n  return {\n    type: PENDING_FETCH_USER_GENERAL_ACTION,\n    payload: true\n  };\n}\nexport function fetchUserGeneralAction(dispatch, data) {\n  return {\n    type: FETCH_USER_GENERAL_ACTION,\n    payload: data.data\n  };\n} //========================== User transactions ==========================\n\nexport function fetchUserTransactions(username) {\n  return dispatch => {\n    dispatch(pendingFetchUserTransactionsAction());\n    dispatch(fetchUserTransactionAction(dispatch, {\n      data: []\n    }));\n    /*return refMstUser.where('username', '==', username).limit(1).get().then(snapshot => {\n        snapshot.forEach(doc => {\n            let list = [];\n            return refMstUser.doc(doc.id).collection('transactions').get().then(snapshot_tran => {\n                snapshot_tran.forEach(doc_tran => {\n                    let item = {\n                        id: doc_tran.id,\n                        ...doc_tran.data()\n                    }\n                    list.push(item);\n                })\n            }).finally(() => {\n                dispatch(fetchUserTransactionAction(dispatch, {data: list}));\n            });\n        });\n    })*/\n  };\n}\nexport function pendingFetchUserTransactionsAction() {\n  return {\n    type: PENDING_FETCH_USER_TRANSACTIONS_ACTION,\n    payload: true\n  };\n}\nexport function fetchUserTransactionAction(dispatch, data) {\n  return {\n    type: FETCH_USER_TRANSACTIONS_ACTION,\n    payload: data.data !== undefined && data.data !== null ? data.data : []\n  };\n} // ========================== User orders ==========================\n\nexport function fetchUserOrders(username) {\n  return dispatch => {\n    dispatch(pendingFetchUserOrdersAction());\n    dispatch(fetchUserOrdersAction(dispatch, {\n      data: []\n    }));\n    /*return refMstUser.where('username', '==', username).limit(1).get().then(snapshot => {\n        snapshot.forEach(doc => {\n            let list = [];\n            return refMstUser.doc(doc.id).collection('orders').get().then(snapshot_order => {\n                snapshot_order.forEach(doc_order => {\n                    let item = {\n                        id: doc_order.id,\n                        ...doc_order.data()\n                    }\n                    list.push(item);\n                })\n            }).finally(() => {\n                dispatch(fetchUserOrdersAction(dispatch, {data: list}));\n            });\n        });\n    })*/\n  };\n}\nexport function pendingFetchUserOrdersAction() {\n  return {\n    type: PENDING_FETCH_USER_ORDERS_ACTION,\n    payload: true\n  };\n}\nexport function fetchUserOrdersAction(dispatch, data) {\n  return {\n    type: FETCH_USER_ORDERS_ACTION,\n    payload: data.data !== undefined && data.data !== null ? data.data : []\n  };\n}","map":{"version":3,"sources":["/Users/trantuan/LaundryShop/laundry-shop-admin/application/src/features/Users/redux/actions.js"],"names":["FETCH_USER_GENERAL_ACTION","FETCH_USER_ORDERS_ACTION","FETCH_USER_TRANSACTIONS_ACTION","PENDING_FETCH_USER_GENERAL_ACTION","PENDING_FETCH_USER_ORDERS_ACTION","PENDING_FETCH_USER_TRANSACTIONS_ACTION","fetchUserGeneral","username","dispatch","pendingFetchUserGeneralAction","fetchUserGeneralAction","data","type","payload","fetchUserTransactions","pendingFetchUserTransactionsAction","fetchUserTransactionAction","undefined","fetchUserOrders","pendingFetchUserOrdersAction","fetchUserOrdersAction"],"mappings":"AAAA,SACIA,yBADJ,EAEIC,wBAFJ,EAGIC,8BAHJ,EAIIC,iCAJJ,EAKIC,gCALJ,EAMIC,sCANJ,QAOO,aAPP,C,CAQA;AAEA;AAEA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AACvC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,6BAA6B,EAA9B,CAAR;AACAD,IAAAA,QAAQ,CAACE,sBAAsB,CAACF,QAAD,EAAW;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAX,CAAvB,CAAR;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEK,GAvBD;AAwBH;AAED,OAAO,SAASF,6BAAT,GAAyC;AAC5C,SAAO;AACHG,IAAAA,IAAI,EAAET,iCADH;AAEHU,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH;AAED,OAAO,SAASH,sBAAT,CAAgCF,QAAhC,EAA0CG,IAA1C,EAAgD;AACnD,SAAO;AACHC,IAAAA,IAAI,EAAEZ,yBADH;AAEHa,IAAAA,OAAO,EAAEF,IAAI,CAACA;AAFX,GAAP;AAIH,C,CAED;;AACA,OAAO,SAASG,qBAAT,CAA+BP,QAA/B,EAAyC;AAC5C,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACO,kCAAkC,EAAnC,CAAR;AACAP,IAAAA,QAAQ,CAACQ,0BAA0B,CAACR,QAAD,EAAW;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAX,CAA3B,CAAR;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK,GAnBD;AAoBH;AAED,OAAO,SAASI,kCAAT,GAA8C;AACjD,SAAO;AACHH,IAAAA,IAAI,EAAEP,sCADH;AAEHQ,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH;AAED,OAAO,SAASG,0BAAT,CAAoCR,QAApC,EAA8CG,IAA9C,EAAoD;AACvD,SAAO;AACHC,IAAAA,IAAI,EAAEV,8BADH;AAEHW,IAAAA,OAAO,EAAEF,IAAI,CAACA,IAAL,KAAcM,SAAd,IAA2BN,IAAI,CAACA,IAAL,KAAc,IAAzC,GAAgDA,IAAI,CAACA,IAArD,GAA4D;AAFlE,GAAP;AAIH,C,CAED;;AACA,OAAO,SAASO,eAAT,CAAyBX,QAAzB,EAAmC;AACtC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACW,4BAA4B,EAA7B,CAAR;AACAX,IAAAA,QAAQ,CAACY,qBAAqB,CAACZ,QAAD,EAAW;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAX,CAAtB,CAAR;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK,GAnBD;AAoBH;AAED,OAAO,SAASQ,4BAAT,GAAwC;AAC3C,SAAO;AACHP,IAAAA,IAAI,EAAER,gCADH;AAEHS,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH;AAED,OAAO,SAASO,qBAAT,CAA+BZ,QAA/B,EAAyCG,IAAzC,EAA+C;AAClD,SAAO;AACHC,IAAAA,IAAI,EAAEX,wBADH;AAEHY,IAAAA,OAAO,EAAEF,IAAI,CAACA,IAAL,KAAcM,SAAd,IAA2BN,IAAI,CAACA,IAAL,KAAc,IAAzC,GAAgDA,IAAI,CAACA,IAArD,GAA4D;AAFlE,GAAP;AAIH","sourcesContent":["import {\n    FETCH_USER_GENERAL_ACTION,\n    FETCH_USER_ORDERS_ACTION,\n    FETCH_USER_TRANSACTIONS_ACTION,\n    PENDING_FETCH_USER_GENERAL_ACTION,\n    PENDING_FETCH_USER_ORDERS_ACTION,\n    PENDING_FETCH_USER_TRANSACTIONS_ACTION,\n} from \"./constants\";\n//import db from \"../../../database/firestore\";\n\n//const refMstUser = db.collection('mst_user')\n\n// ========================== User general ==========================\nexport function fetchUserGeneral(username) {\n    return dispatch => {\n        dispatch(pendingFetchUserGeneralAction())\n        dispatch(fetchUserGeneralAction(dispatch, {data: null}));\n        /*return refMstUser.where('username', '==', username).limit(1).get().then(snapshot => {\n            let data = null;\n            snapshot.forEach(doc => {\n                data = {\n                    id: doc.id,\n                    ...doc.data(),\n                    balance: 0\n                }\n\n                return refMstUser.doc(doc.id).collection('transactions').get().then(snapshot_tran => {\n                    let balance = 0;\n                    snapshot_tran.forEach(doc_tran => {\n                        balance += parseInt(doc_tran.data().amount)\n                    })\n                    data.balance = balance;\n                }).finally(() => {\n                    dispatch(fetchUserGeneralAction(dispatch, {data: data}));\n                });\n            });\n        })*/\n    }\n}\n\nexport function pendingFetchUserGeneralAction() {\n    return {\n        type: PENDING_FETCH_USER_GENERAL_ACTION,\n        payload: true\n    };\n}\n\nexport function fetchUserGeneralAction(dispatch, data) {\n    return {\n        type: FETCH_USER_GENERAL_ACTION,\n        payload: data.data\n    };\n}\n\n//========================== User transactions ==========================\nexport function fetchUserTransactions(username) {\n    return dispatch => {\n        dispatch(pendingFetchUserTransactionsAction())\n        dispatch(fetchUserTransactionAction(dispatch, {data: []}));\n        /*return refMstUser.where('username', '==', username).limit(1).get().then(snapshot => {\n            snapshot.forEach(doc => {\n                let list = [];\n                return refMstUser.doc(doc.id).collection('transactions').get().then(snapshot_tran => {\n                    snapshot_tran.forEach(doc_tran => {\n                        let item = {\n                            id: doc_tran.id,\n                            ...doc_tran.data()\n                        }\n                        list.push(item);\n                    })\n                }).finally(() => {\n                    dispatch(fetchUserTransactionAction(dispatch, {data: list}));\n                });\n            });\n        })*/\n    }\n}\n\nexport function pendingFetchUserTransactionsAction() {\n    return {\n        type: PENDING_FETCH_USER_TRANSACTIONS_ACTION,\n        payload: true\n    };\n}\n\nexport function fetchUserTransactionAction(dispatch, data) {\n    return {\n        type: FETCH_USER_TRANSACTIONS_ACTION,\n        payload: data.data !== undefined && data.data !== null ? data.data : []\n    };\n}\n\n// ========================== User orders ==========================\nexport function fetchUserOrders(username) {\n    return dispatch => {\n        dispatch(pendingFetchUserOrdersAction())\n        dispatch(fetchUserOrdersAction(dispatch, {data: []}));\n        /*return refMstUser.where('username', '==', username).limit(1).get().then(snapshot => {\n            snapshot.forEach(doc => {\n                let list = [];\n                return refMstUser.doc(doc.id).collection('orders').get().then(snapshot_order => {\n                    snapshot_order.forEach(doc_order => {\n                        let item = {\n                            id: doc_order.id,\n                            ...doc_order.data()\n                        }\n                        list.push(item);\n                    })\n                }).finally(() => {\n                    dispatch(fetchUserOrdersAction(dispatch, {data: list}));\n                });\n            });\n        })*/\n    }\n}\n\nexport function pendingFetchUserOrdersAction() {\n    return {\n        type: PENDING_FETCH_USER_ORDERS_ACTION,\n        payload: true\n    };\n}\n\nexport function fetchUserOrdersAction(dispatch, data) {\n    return {\n        type: FETCH_USER_ORDERS_ACTION,\n        payload: data.data !== undefined && data.data !== null ? data.data : []\n    };\n}\n"]},"metadata":{},"sourceType":"module"}